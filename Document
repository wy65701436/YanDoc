This document will be for the following things, 

1,Design Approaches
2,Tips and Tricks
3,Special functions, commands and instructions
4,Lessons learnt
5,Peculiar situations
6,Debugging methods
7,Best Practices
8,Anything which can help you in future


------------------------------------------
Git commands:

git remote -v
git remote add upstream https://github.com

//Force to overwrite local code.
git fetch upstream
git checkout master
git reset --hard upstream/master  
git push origin master --force

git fetch upstream
git checkout upstream/dev
git reset --hard upstream/dev  
git checkout -b dev -- to add an new branch into origin.
git push origin dev --force 

//squash commits
git rebase -i upstream/master
git push origin swagger-check

//git drop last modified files
git stash save --keep-index
git stash drop

//show the git command history
git reflog

//delete the last commit
git reset --hard HEAD~1

//git tutorial
http://joehill.me/2016/02/18/2016-02-18-Git-Tutorial/

// git delete bunch of branches
git branch | grep "<pattern>" | xargs git branch -D

------------------------------------------
Linux commands:
// Find the debug key words in all the C++ file.
$find . -name \*.cpp -exec grep -q "debug" '{}' \; -print

// Delete all untagged docker images
docker rmi -f $(docker images | grep "^<none>" | awk "{print $3}") 

comm -23 <(find . -type f -name "link" | grep "_manifests/revisions/sha256" | grep -v "\/signatures\/sha256\/" | awk -F/ '{print $(NF-1)}' | sort) <(for f in $(find . -type f -name "link" | grep "_manifests/tags/.*/current/link"); do cat ${f} | sed 's/^sha256://g'; echo; done | sort) | wc -l

// link 
ln -s /opt/sts-bundle/sts-3.6.3.RELEASE/STS /usr/local/bin/sts

// set proxy for apt
gedit /etc/apt/apt.conf
Acquire::http::Proxy "http://yourproxyaddress:proxyport";

// listen port
lsof -i -P -n | grep LISTEN

------------------------------------------
Docker commands:

1. Make sure that exited containers are deleted.
docker rm -v $(docker ps -a -q -f status=exited)
2. Remove unwanted ‘dangling’ images.
docker rmi $(docker images -f "dangling=true" -q)
3. Still not enough space? What is this ‘vfs’ directory?
docker volume rm $(docker volume ls -qf dangling=true)

------------------------------------------
GAS:
go get -u github.com/GoASTScanner/gas
gas -fmt=json -out=results.json -skip "*vendor*" -quiet ./...

------------------------------------------
Drone:
./drone -s https://ci.vmware.run -t {token} secure --in secrets.yml  --out ".drone.sec" --repo vmware/harbor --yaml ".drone.yml"

drone secret add --event pull_request --image=vmware/harbor-e2e-engine --conceal=true vmware/harbor MAIL_PWD 123123


Docker Errors for deamon.
{"errors":[{"code":"BLOB_UNKNOWN","message":"blob unknown to registry","detail":"sha256:7a10e723df312f30e391acbc86450113b63a845889346e0b91ba62eaaf0777e1"}]}
{\"errors\":[{\"code\":\"412\",\"message\":\"The image is not signed in Notary.\",\"detail\":\"The image is not signed in Notary.\"}]}

--------------------------------------------
Mysql
socat TCP-LISTEN:3306,fork TCP:172.17.0.5:3306

//Repo
https://ci.appveyor.com/api/github/webhook?id=l7ruq5kqnq564sf1

--------------------------------------------
GO build
/build/apps/bin/gobuild sandbox queue  harbor_build --branch=master --changeset=$LATEST_CHANGE  --buildtype=beta  --user=daojunz -v

du . -h --max-depth=1

https://www.shellcheck.net/
